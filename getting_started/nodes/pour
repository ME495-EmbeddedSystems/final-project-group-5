#!/usr/bin/env python

import sys
import numpy as np
import rospy
import moveit_commander
import geometry_msgs
import std_msgs
import actionlib
import franka_gripper.msg 
from franka_gripper.msg import GraspAction, GraspGoal, GraspActionGoal, GraspEpsilon
from std_srvs.srv import Empty, EmptyResponse

class main:
    
    def __init__(self):

        moveit_commander.roscpp_initialize(sys.argv)

        self.robot_name = "panda_arm"
        self.robot_group = moveit_commander.MoveGroupCommander(self.robot_name)
        self.gripper_name = "hand"
        self.gripper_group = moveit_commander.MoveGroupCommander(self.gripper_name)

        self.scene = moveit_commander.PlanningSceneInterface()

        rospy.sleep(5)

        self.grasper = actionlib.SimpleActionClient("/franka_gripper/grasp", GraspAction)
        self.grasper.wait_for_server()

        rospy.Service('pour',Empty,self.pour)
        print('Services ready')

    def pour(self,empty):

        self.open()

        self.open()

        pose = geometry_msgs.msg.Pose()
        pose.position.x = .52304
        pose.position.y = -0.04363
        pose.position.z = .089752
        pose.orientation.x = .58237
        pose.orientation.y = .4014
        pose.orientation.z = -0.40509
        pose.orientation.w = 0.57934
        self.robot_group.go(pose, wait="true")
        self.robot_group.stop()

        print("Grasping")
        self.grasp(.06,.005,.005,.1,20)

        print("Back to home")
        self.ready()

        print("Tipping")
        joint5 = -np.pi/2
        joint7 = np.pi/2 + np.pi/4
        self.tip(joint5)
        self.spin(joint7)

        print("Squeezing")
        self.grasp(.04,.005,.005,.1,50)

        print("Back to home")
        self.ready()

        return []
    
    def grasp(self, width, epsilon_inner, epsilon_outer, speed, force):
        ep = GraspEpsilon(inner=epsilon_inner,outer=epsilon_outer)
        action = GraspGoal()
        action.width = width
        action.epsilon = ep
        action.speed = speed
        action.force = force
        self.grasper.send_goal(action)

    def tip(self,joint5):
        one, two, three, four, five, six, seven = self.robot_group.get_current_joint_values()
        self.robot_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': joint5, 'panda_joint6': six, 'panda_joint7': seven})
        self.robot_group.go()
        self.robot_group.stop()

    def spin(self,joint7):

        one, two, three, four, five, six, seven = self.robot_group.get_current_joint_values()
        self.robot_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': joint7})
        self.robot_group.go()
        self.robot_group.stop()

    def ready(self):

        self.robot_group.set_named_target('ready')
        self.robot_group.go()
        self.robot_group.stop()

    def close(self):
        self.gripper_group.set_named_target('close')
        self.gripper_group.go()
        self.gripper_group.stop()

    def open(self):
        self.gripper_group.set_named_target('open')
        self.gripper_group.go()
        self.gripper_group.stop()
        
if __name__ == '__main__':
    rospy.init_node('send_commands')
    main = main()
    rospy.spin()