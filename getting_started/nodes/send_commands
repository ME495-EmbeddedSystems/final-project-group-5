#!/usr/bin/env python

import sys
import rospy
import moveit_commander
import geometry_msgs
import std_msgs
import actionlib
import franka_gripper.msg 
from franka_gripper.msg import GraspAction, GraspGoal, GraspActionGoal, GraspEpsilon
from std_srvs.srv import Empty, EmptyResponse

class main:
    
    def __init__(self):

        moveit_commander.roscpp_initialize(sys.argv)

        self.robot_name = "panda_arm"
        self.robot_group = moveit_commander.MoveGroupCommander(self.robot_name)
        self.gripper_name = "hand"
        self.gripper_group = moveit_commander.MoveGroupCommander(self.gripper_name)

        self.scene = moveit_commander.PlanningSceneInterface()

        rospy.sleep(5)

        rospy.Service('random_pose',Empty,self.go_to_random)
        rospy.Service('extend',Empty,self.go_to_extended)
        rospy.Service('open_gripper',Empty,self.open_gripper)
        rospy.Service('close_gripper',Empty,self.close_gripper)
        rospy.Service('grab_spatula',Empty,self.grab)

    def grasp(self):
        grasp_action_client = actionlib.SimpleActionClient("/franka_gripper/grasp", GraspAction)
        grasp_action_client.wait_for_server()
        ep = GraspEpsilon(inner=.005,outer=.005)
        action = GraspGoal()
        action.width = .008
        action.epsilon = ep
        action.speed = .1
        action.force = 25
        grasp_action_client.send_goal(action)


    def grab(self,empty):
        
        pose = geometry_msgs.msg.Pose()
        pose.position.x = .31342
        pose.position.y = -0.024123
        pose.position.z = .11913
        pose.orientation.x = .51011
        pose.orientation.y = .85472
        pose.orientation.z = -0.0122
        pose.orientation.w = 0.09534
        self.robot_group.go(pose, wait="true")
        self.robot_group.stop()

        print("Grasping")
        self.grasp()

        print("Back to home")
        self.ready()

        return []

    def go_to_random(self,empty):
        pose = geometry_msgs.msg.Pose()
        pose.position.x = -0.0686
        pose.position.y = 0.22654
        pose.position.z = 1.0141
        pose.orientation.x = -0.09
        pose.orientation.y = 0.82774
        pose.orientation.z = -0.059948
        pose.orientation.w = 0.055058
        self.robot_group.go(pose, wait="true")
        self.robot_group.stop()

        return []

    def go_to_extended(self,empty):

        self.robot_group.set_named_target('extended')
        self.robot_group.go()
        self.robot_group.stop()

        return []

    def go_to_ready(self,empty):
        self.ready()

        return []

    def ready(self):

        self.robot_group.set_named_target('ready')
        self.robot_group.go()
        self.robot_group.stop()

    def close(self):
        self.gripper_group.set_named_target('close')
        self.gripper_group.go()
        self.gripper_group.stop()

    def close_gripper(self,empty):

        self.close()

        return []

    def open_gripper(self,empty):

        self.gripper_group.set_named_target('open')
        self.gripper_group.go()
        self.gripper_group.stop()

        return []
        
if __name__ == '__main__':
    rospy.init_node('send_commands')
    main = main()
    rospy.spin()