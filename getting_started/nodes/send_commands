#!/usr/bin/env python

import sys
import numpy as np
import rospy
import moveit_commander
import geometry_msgs
import std_msgs
import actionlib
import franka_gripper.msg 
from franka_gripper.msg import GraspAction, GraspGoal, GraspActionGoal, GraspEpsilon
from std_srvs.srv import Empty, EmptyResponse

class main:
    
    def __init__(self):

        moveit_commander.roscpp_initialize(sys.argv)

        self.robot_name = "panda_arm"
        self.robot_group = moveit_commander.MoveGroupCommander(self.robot_name)
        self.gripper_name = "hand"
        self.gripper_group = moveit_commander.MoveGroupCommander(self.gripper_name)

        self.scene = moveit_commander.PlanningSceneInterface()

        rospy.sleep(5)

        rospy.Service('random_pose',Empty,self.go_to_random)
        rospy.Service('extend',Empty,self.go_to_extended)
        rospy.Service('open_gripper',Empty,self.open_gripper)
        rospy.Service('close_gripper',Empty,self.close_gripper)
        rospy.Service('grab_spatula',Empty,self.grab_spatula)
        rospy.Service('spin',Empty,self.spin)
        rospy.Service('pour',Empty,self.pour)
        print('Services ready')

    def squeeze(self):
        grasper = actionlib.SimpleActionClient("/franka_gripper/grasp", GraspAction)
        grasper.wait_for_server()
        ep = GraspEpsilon(inner=.005,outer=.005)
        action = GraspGoal()
        action.width = .04
        action.epsilon = ep
        action.speed = .1
        action.force = 50
        grasper.send_goal(action)

        rospy.sleep(3)

        self.grasp()

    def spin(self,empty):

        self.spin_joint7()

        return []

    def spin_joint7(self):

        one, two, three, four, five, six, seven = self.robot_group.get_current_joint_values()
        self.robot_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': np.pi/2 + np.pi/4})
        self.robot_group.go()
        self.robot_group.stop()

    def grasp(self):
        grasper = actionlib.SimpleActionClient("/franka_gripper/grasp", GraspAction)
        grasper.wait_for_server()
        ep = GraspEpsilon(inner=.005,outer=.005)
        action = GraspGoal()
        # action.width = .008
        # action.epsilon = ep
        # action.speed = .1
        # action.force = 25
        action.width = .05
        action.epsilon = ep
        action.speed = .1
        action.force = 25
        grasper.send_goal(action)

    def grab_spatula(self,empty):
        
        self.open()

        pose = geometry_msgs.msg.Pose()
        pose.position.x = .48792
        pose.position.y = -0.069547
        pose.position.z = .11123
        pose.orientation.x = .375
        pose.orientation.y = .60489
        pose.orientation.z = -0.59559
        pose.orientation.w = 0.37251
        self.robot_group.go(pose, wait="true")
        self.robot_group.stop()

        print("Grasping")
        self.grasp()

        print("Back to home")
        self.ready()

        return []

    def pour(self,empty):

        self.open()

        self.open()

        pose = geometry_msgs.msg.Pose()
        pose.position.x = .52304
        pose.position.y = -0.04363
        pose.position.z = .089752
        pose.orientation.x = .58237
        pose.orientation.y = .4014
        pose.orientation.z = -0.40509
        pose.orientation.w = 0.57934
        self.robot_group.go(pose, wait="true")
        self.robot_group.stop()

        print("Grasping")
        self.grasp()

        print("Back to home")
        self.ready()

        print("Tipping")
        one, two, three, four, five, six, seven = self.robot_group.get_current_joint_values()
        self.robot_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': -np.pi/2, 'panda_joint6': six, 'panda_joint7': seven})
        self.robot_group.go()
        self.robot_group.stop()
        self.spin_joint7()

        print("Squeezing")
        self.squeeze()

        print("Back to home")
        self.ready()

        return []


    def go_to_random(self,empty):
        pose = geometry_msgs.msg.Pose()
        pose.position.x = .48328
        pose.position.y = -0.03378
        pose.position.z = .10935
        pose.orientation.x = 0.61271
        pose.orientation.y = 0.31407
        pose.orientation.z = -0.31445
        pose.orientation.w = 0.6535
        self.robot_group.go(pose, wait="true")
        self.robot_group.stop()

        return []

    def go_to_extended(self,empty):

        self.robot_group.set_named_target('extended')
        self.robot_group.go()
        self.robot_group.stop()

        return []

    def go_to_ready(self,empty):
        self.ready()

        return []

    def ready(self):

        self.robot_group.set_named_target('ready')
        self.robot_group.go()
        self.robot_group.stop()

    def close(self):
        self.gripper_group.set_named_target('close')
        self.gripper_group.go()
        self.gripper_group.stop()

    def close_gripper(self,empty):

        self.close()

        return []

    def open(self):
        self.gripper_group.set_named_target('open')
        self.gripper_group.go()
        self.gripper_group.stop()

    def open_gripper(self,empty):

        self.open()

        return []
        
if __name__ == '__main__':
    rospy.init_node('send_commands')
    main = main()
    rospy.spin()