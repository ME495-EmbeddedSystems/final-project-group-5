#!/usr/bin/env python

"""
This node is responsible for the motion planning of the Franka Emika Panda robot in order to pour batter,
flip pancakes, and lift them off a griddle.

SERVICES:
    + /pour (Empty) ~ commands the robot to pour batter from a bottle onto the griddle
    + /flip (Empty) ~ commands the robot to use a spatula to flip a pancake on the griddle
    + /lift (Empty) ~ commands the robot to use a spatula to lift the pancake off the griddle
ACTIONS:
    + /grasp (GraspAction) ~ action that commands the franka grippers to hold the bottle
PARAMETERS:
    + work_table_pose ~ the pose of the work table
    + work_table_dims ~ the dimensions of the work table
    + base_table_pose ~ the pose of the base table
    + base_table_dims ~ the dimensions of the work table

"""
from pancake_pkg.transform import TransformToRobot
import numpy as np
import rospy
import sys
import moveit_commander
from geometry_msgs.msg import PoseStamped, Pose, Quaternion, TransformStamped
from moveit_commander.conversions import list_to_pose
from std_srvs.srv import Empty, EmptyResponse
import actionlib
from franka_gripper.msg import GraspAction, GraspGoal, GraspEpsilon
from rospy.core import logdebug, logerror
from math import pi
import numpy as np
from tf import TransformListener
import tf2_ros
from copy import deepcopy
from tf_conversions import transformations
 
 
class ManipulatorControl:
    def __init__(self):
        super(ManipulatorControl, self).__init__()

        # initialize moveit commander
        moveit_commander.roscpp_initialize(sys.argv)
        logdebug("initialize moveit")
        
        # instantiate robot commander object
        self.robot = moveit_commander.RobotCommander()

        # instantiate scene object
        self.scene = moveit_commander.PlanningSceneInterface()

        # instantiate move groups
        self.arm_move_group = moveit_commander.MoveGroupCommander('panda_arm')
        self.arm_move_group.set_planning_time(5.0)
        self.gripper_move_group = moveit_commander.MoveGroupCommander('hand')
        
        self.planning_frame = self.arm_move_group.get_planning_frame()

        self.work_table_pose = rospy.get_param("work_table_pose")
        self.work_table_dims = rospy.get_param("work_table_dims")
        self.base_table_pose = rospy.get_param("base_table_pose")
        self.base_table_dims = rospy.get_param("base_table_dims")

        rospy.set_param('/pancaked',False)
        rospy.set_param("/flipped", False)

        # pubs, subs, servs, etc.
        self.flip = rospy.Service("flip", Empty, self.flip_callback)
        self.pour = rospy.Service("pour", Empty, self.pour_callback)
        self.lift = rospy.Service("lift", Empty, self.lift_callback)
        self.make_pancakes = rospy.Service("make_pancakes", Empty, self.make_pancakes_callback)
        self.client = actionlib.SimpleActionClient("/franka_gripper/grasp", GraspAction)

        self.link0_atag()

        self.add_work_table()
        self.add_base_table()
        self.add_camera_stand()
        self.add_camera()
        self.add_left_camera_stand()

        self.lift_waypoints = []

        #self.tmr = rospy.Timer(rospy.Duration(1/100), self.dyn_tf)
        self.tmr = rospy.Timer(rospy.Duration(1/100), self.align_camera)
        

    def wait_for_state_update(self, box_name, box_is_known=False, box_is_attached=False, timeout=4):
        """ Waits until changes are reflected in object lists 

        Ensures that collision updates are made in case the python node dies before publishing.
        Integrated from Interbotix MoveIt Python Move Group Tutorials

        Args: 
            box_name (string) : name of the box being added 
            box_is_known (bool) : if box is in get_known_object_names()
            box_is_attached (bool) : if box is in get_attached_objects()
            timeout (int) : time limit

        Returns:
            False (bool) : false return if the while loop is exited without returning (a timeout)
        
        """
        start = rospy.get_time()
        seconds = rospy.get_time()

        while (seconds - start < timeout) and not rospy.is_shutdown():
            attached_objects = self.scene.get_attached_objects([box_name])
            is_attached = len(attached_objects.keys()) > 0

            is_known = box_name in self.scene.get_known_object_names()

            if (box_is_attached == is_attached) and (box_is_known == is_known):
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()

        return False

    def link0_atag(self):
        """ The transform from the table to the world

        Broadcasts the transform from the table's april tag to the world frame
        
        Args:
            None
        Returns:
            None
        """
        static_broadcaster = tf2_ros.StaticTransformBroadcaster()
        link0_atag_tf = TransformStamped()
        link0_atag_tf.header.stamp = rospy.Time.now()
        link0_atag_tf.header.frame_id = "table_tag" 
        link0_atag_tf.child_frame_id = "world"
        link0_atag_tf.transform.translation.x = -0.1143
        link0_atag_tf.transform.translation.y = -0.1111
        link0_atag_tf.transform.translation.z = 0.0
        q2 = transformations.quaternion_from_euler(0, 0, -np.pi/4)
        logdebug(q2)
        link0_atag_tf.transform.rotation.w = 1
        static_broadcaster.sendTransform(link0_atag_tf)

    def align_camera(self, event=None):
        """ Aligns the camera using the transform tree

        Looks up the transformation from the world to the camera and sets offsets
        
        Args:
            None
        Returns:
            None
        """
        # broadcaster = tf2_ros.TransformBroadcaster()
        # tf_time = rospy.Time.now()
        # listen = TransformListener()
        
        # While True:
        #     try:
        #         listen.waitForTransform('/world','/camera_color_optical_frame',rospy.Time(), rospy.Duration(4.0))
        #         break
        #     except: 
        #         logerr("Where's the world bro???")
        #         continue
        
        # (trans, rot) = listen.lookupTransform('/world', '/camera_color_optical_frame', rospy.Time(0))
        
        # Spatula tag in real life:
        spatula_irl = [0.4826, -0.1778, 0.13335] # [0.1905, 0.13335, 0.0889] 

        # Spatula tag in world:
        spatula_world = [0.51747, -0.058509, 0.39745] #[0.1582140605076095, 0.2797960560533358, 0.41160352659259514]

        self.camera_offset = [spatula_irl[0] - spatula_world[0], spatula_irl[1]-spatula_world[1], spatula_irl[2]-spatula_world[2]]

        # self.un_rotation = [-1*rot[0], -1*rot[1], -1*rot[2],-1*rot[3]]

    def dyn_tf(self, event=None):
        """ The timer callback function.

        Broadcasts the transform from the camera to the pancake, when applicable
        
        Args:
            event (None)
        Returns:
            None
        """
        flag = rospy.get_param("/flip_time")
        #self.align_camera()

        if flag:
            logdebug("trying to find the pancake")
            self.pancake = rospy.get_param("/flip_location") # position of pancake in camera frame
            logdebug("got the pancake location")
            broadcaster = tf2_ros.TransformBroadcaster()
            # Add Odometry to base_footprint in tf
            tf_time = rospy.Time.now()
            pancake_tf = TransformStamped()
            pancake_tf.header.stamp = tf_time
            pancake_tf.header.frame_id = "camera_color_optical_frame"
            pancake_tf.child_frame_id = "pancake"
            pancake_tf.transform.translation.x = (self.pancake[0])/1000
            pancake_tf.transform.translation.y = (self.pancake[1])/1000
            pancake_tf.transform.translation.z = (self.pancake[2])/1000
            # Quaternion of the angle about the z axis
            pancake_tf.transform.rotation = Quaternion(*self.un_rotation)
            # Send the transform
            broadcaster.sendTransform(pancake_tf)
        else:
            rospy.logerr_once("Haven't found a pancake yet")

    def ee_offset(self, pose):
        """ Offsets the pose to account for the actual position of the grippers relative to where the end effector link is measured

        Function that takes in a pose and offsets it according to the offset of the grippers

        Args:
            pose (geometry_msgs/Pose) : the pose to be offset by
        Returns:
            geometry_msgs/Pose : the offsetted pose
        """
        pose.position.x += 0.02
        pose.position.y += 0.0358
        pose.position.z += 0

        return pose 

    def add_work_table(self):
        """ Adds worktable to planning scene

        Places table collision object based on the world frame to the left of robot

        Args:
            None
        Returns:
            None
        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = self.work_table_pose[0]
        table_pose.pose.position.y = self.work_table_pose[1]
        table_pose.pose.position.z = self.work_table_pose[2] - .2
        table_pose.pose.orientation.w = 1.0
        table_name = "work_table"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(self.work_table_dims[0], self.work_table_dims[1], self.work_table_dims[2]))
    
    def add_base_table(self):
        """ Adds base table to planning scene 

        Places table collision object based on the world frame to front of the robot
        Args:
            None
        Returns:
            None
        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = self.base_table_pose[0]
        table_pose.pose.position.y = self.base_table_pose[1]
        table_pose.pose.position.z = self.base_table_pose[2] - .05
        table_pose.pose.orientation.w = 1.0
        table_name = "base_table"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(self.base_table_dims[0], self.base_table_dims[1], self.base_table_dims[2]))
    
    def add_camera_stand(self):
        """ Adds camera stand to planning scene 

        Places camera stand collision object based on the world frame to right of the robot

        Args:
            None
        Returns:
            None

        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = -0.3
        table_pose.pose.position.y = 0.3
        table_pose.pose.position.z = self.base_table_pose[2]
        table_pose.pose.orientation.w = 1.0
        table_name = "camera_stand"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(0.0254, 0.0254, 4.0))

    def add_left_camera_stand(self):
        """ Adds left camera stand to planning scene 

        Places camera stand collision object based on the world frame to left of the robot

        Args:
            None
        Returns:
            None

        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = -0.3
        table_pose.pose.position.y = -0.3
        table_pose.pose.position.z = self.base_table_pose[2]
        table_pose.pose.orientation.w = 1.0
        table_name = "left_camera_stand"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(0.0254, 0.0254, 4.0))

    def add_camera(self):
        """ Adds camera to planning scene 

        Places camera collision object based on the world frame to right of the robot

        Args:
            None
        Returns:
            None
        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = -0.3
        table_pose.pose.position.y = 0.3
        table_pose.pose.position.z = 0.7
        table_pose.pose.orientation.w = 1.0
        table_name = "camera"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(0.5, 0.0254, 0.0254))

    def get_pose(self, name):
        """ Gets the pose of a target object
        
        Computes computes the pose necessary for the arm to reach the target object

		Args:
            name (string) : the object to get the pose of
		Returns:
			geometry_msgs/Pose : the pose for the end-effector
		"""

        if name == "pancake": 
            
            listen = TransformListener()
            while True:
                try:
                    #self.dyn_tf()
                    #self.align_camera()
                    # logdebug(rospy.get_param("/flip_location"))
                    listen.waitForTransform('/panda_link0','/flip_location',rospy.Time(), rospy.Duration(4.0))
                    break
                except:
                    logerror("Where is the pancake transform bro???")
                    continue
            
            (trans, rot) = listen.lookupTransform('/panda_link0', '/flip_location', rospy.Time(0))

            logdebug(trans)

            obj_pos = trans

        elif name == "finished_pancake": 
            listen = TransformListener()
            while True:
                try:
                    #self.dyn_tf()
                    #self.align_camera()
                    listen.waitForTransform('/panda_link0','/lift_location',rospy.Time(), rospy.Duration(4.0))
                    break
                except:
                    logerror("Do you even lift bro???")
                    continue
            
            (trans, rot) = listen.lookupTransform('/panda_link0', '/lift_location', rospy.Time(0))

            logdebug(trans)

            obj_pos = trans
        
        elif name == "spatula": 
            listen = TransformListener()
            while True:
                try:
                    listen.waitForTransform('/panda_link0','/spatula_tag',rospy.Time(), rospy.Duration(4.0))
                    break
                except:
                    logerror("Where is the spatula transform bro???")
                    continue
            
            (trans, rot) = listen.lookupTransform('/panda_link0', '/spatula_tag', rospy.Time(0))

            logdebug(trans)
            atag_offset = [0.05,-0.063,-0.102] #Offset between atag on the spatula rest and the spatula grip location


            # obj_pos = [trans[0] + self.camera_offset[0] + atag_offset[0], trans[1] + self.camera_offset[1] + atag_offset[1] + 0.02, trans[2] + self.camera_offset[1] + atag_offset[2] + 0.025]
            obj_pos = [trans[0] + self.camera_offset[0] + atag_offset[0], trans[1] + self.camera_offset[1] + atag_offset[1], trans[2] + self.camera_offset[1] + atag_offset[2]]
            rot_angle = transformations.euler_from_quaternion(rot)
            self.grasp_offset = rot_angle[2] - pi/2

        elif name == "bottle": 
            listen = TransformListener()
            while True:
                try:
                    listen.waitForTransform('/panda_link0','/bottle_tag',rospy.Time(), rospy.Duration(4.0))
                    break
                except:
                    logerror("Where is the bottle transform bro???")
                    continue              
            
            (trans, rot) = listen.lookupTransform('/panda_link0', '/bottle_tag', rospy.Time(0))

            logdebug(trans)
            obj_pos = [trans[0] + self.camera_offset[0] + 0.02, trans[1] + self.camera_offset[1] + 0.0158 + 0.035, trans[2] + self.camera_offset[2] + .05] #0.02, 0.04

        else: 
            KeyError("Object does not exist")
        
        tf = TransformToRobot(name, obj_pos)
        logdebug(obj_pos)
        logdebug(tf)
        pose_list = tf.compute()
        pose = list_to_pose(pose_list)

        return pose

    def open_gripper(self):
        """ Opens the grippers

        Sets the target pose of the gripper to OPEN

        Args:
            None
        Returns:
            None
        """
        self.gripper_move_group.set_named_target('open')
        self.gripper_move_group.go()
        self.gripper_move_group.stop()
        self.gripper_move_group.clear_pose_targets()
    
    def close_gripper(self):
        """ Closes the grippers

        Sets the target pose of the grippers to CLOSE

        Args:
            None
        Returns:
            None
        """
        self.gripper_move_group.set_named_target('close')
        self.gripper_move_group.go()
        self.gripper_move_group.stop()
        self.gripper_move_group.clear_pose_targets()

        return

    def go_to_ready(self):
        """ Commands the robot arm to the ready position

        Sets the target pose of the arm move group to READY

        Args:
            None
        Returns:
            None

        """
        self.arm_move_group.set_named_target('ready')
        self.arm_move_group.go()
        self.arm_move_group.stop()
        return
        
    def grasp(self, width, epsilon_inner, epsilon_outer, speed, force):
        """ Uses actions to close gripper 
        Specifies specific width and force with which to grip objects 
        Args: 
            width (float) : size of the object to grasp [m]
            epsilon_inner (float) : max tolerated deviation when the actual grasped 
                                    width is smaller than the commanded
            epsilon_outer (float) : max tolerated deviation when the actual grasped
                                    width is wider than the commanded 
            speed (float) : closing speed [m/s]
            force (float) : force for gripping specified object [N]
        Returns:
            None
        
        """
        self.client.wait_for_server()
        ep = GraspEpsilon(inner = epsilon_inner, outer = epsilon_outer)
        action = GraspGoal()
        action.width = width
        action.epsilon = ep
        action.speed = speed
        action.force = force
        self.client.send_goal(action)
        self.client.wait_for_result(rospy.Duration(15.0))

        return

    def flip_spatula(self):
        """ Moves single joint based on current position

        Commands the last joint to rotate in order to flip the spatula

        Args:
            None
        Returns:
            None
        """
        self.arm_move_group.set_max_velocity_scaling_factor(0.95)
        self.arm_move_group.set_max_acceleration_scaling_factor(1.0)
        self.arm_move_group.remember_joint_values("panda_arm")
        joints = self.arm_move_group.get_remembered_joint_values()
        joint = joints["panda_arm"]
        joint[-1] = pi/2

        self.arm_move_group.set_joint_value_target(joint)
        self.arm_move_group.go()
        self.arm_move_group.stop()
        self.arm_move_group.clear_pose_targets()

        return

    def tip(self,joint5):
        """ Tips the end of the arm

        Commands joint 5 in order to tip the arm to a user-specified position

        Args:
            joint5 (float) : the angle to command joint 5 to
        Returns:
            None
        """
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': joint5, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return

    def spin(self,joint7):
        """ Spins the end of the arm

        Commands joint 7 in order to spin the gripper to a user-specified position

        Args:
            joint7 (float) : the angle to command joint 7 to
        Returns:
            None
        """
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': joint7})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return

    def pivot(self,joint1):
        """ Pivots the arm

        Commands joint 1 to pivot the arm to a user-specified position

        Args:
            joint1 (float) : the angle to command joint 1 to
        Returns:
            None
        """
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': joint1, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return

    def extend(self, joint2, joint4):
        """ Extends the arm

        Commands joint 2 and joint 4 to extend the arm to a user-specified position

        Args:
            joint2 (float) : the angle to command joint 2 to
            joint4 (float) : the angle to command joint 4 to
        Returns:
            None
        """
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': joint2, 'panda_joint3': three, 'panda_joint4': joint4, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return

    def pour_callback(self, empty=None):
        """ The pour callback function

        Commands the robot to pick up the bottle and pour batter onto the griddle

        Args:
            empty (None) : holder for empty input
        Returns:
            EmptyResponse : empty response
        """

        #Open Gripper
        self.open_gripper()
        
        #Get bottle position
        pose = self.get_pose('bottle')
        logdebug(pose)

        pose.position.y += 0.05

        if pose.position.z <= .06:
            pose.position.z = 0.065

        self.arm_move_group.set_max_velocity_scaling_factor(0.5)

        #Single joint control waypoints
        self.pivot(pi/4)

        self.tip(-1)

        self.extend(.34,-1.9)

        #Cartesian path to grasp bottle and lift slightly
        waypoints = []

        waypoints.append(deepcopy(pose))

        moveit_robot_state = self.robot.get_current_state()
        
        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)
        
        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("trajectory failed :(")

        logdebug("Grasping")
        self.grasp(.065,.01,.01,.3, 35)

        waypoints = []

        self.ee_pose = self.arm_move_group.get_current_pose()
        self.ee_pose.pose.position.z = pose.position.z + 0.01
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("please re-plan")

        #Move bottle over griddle
        self.pivot(.96)

        self.extend(-.08,-2.7)

        self.arm_move_group.set_max_velocity_scaling_factor(0.9)
        self.arm_move_group.set_max_acceleration_scaling_factor(0.9)

        #Tip bottle and squeeze out batter
        logdebug("Tipping")
        joint5 = -.96 
        joint7 = -2.7
        self.tip(joint5)
        self.spin(joint7)

        self.arm_move_group.set_max_velocity_scaling_factor(0.5)
        self.arm_move_group.set_max_acceleration_scaling_factor(0.1)

        self.saved_pancake_pose = self.arm_move_group.get_current_pose()
        
        rospy.set_param('/saved_pancake_pose',[self.saved_pancake_pose.pose.position.x,self.saved_pancake_pose.pose.position.y,self.saved_pancake_pose.pose.position.z])
        logdebug(self.saved_pancake_pose)

        logdebug("Squeezing")
        self.grasp(.045,.01,.01,.3, 10)    

        rospy.sleep(12)

        #Single joint control waypoints to return the bottle
        self.spin(0)

        self.pivot(pi/4)

        self.tip(-1)

        self.extend(.34,-1.9)

        logdebug("Return bottle")

        #Cartesian path to set the bottle down an dodge the bottle on the way home
        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        self.arm_move_group.execute(plan, wait="True")

        self.open_gripper()

        waypoints = []

        self.ee_pose = self.arm_move_group.get_current_pose()
        self.ee_pose.pose.position.z = pose.position.z + 0.06
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("please re-plan")

        self.pivot(pi/4)

        self.go_to_ready()

        rospy.set_param('/pancaked',True)

        return EmptyResponse()

    def flip_callback(self, event=None):
        """ Callback function for the flip service 
        
        Moves the robot to follow waypoints in the parameter server to flip the pancake
        
        Args: 
            event (Empty) : Event holder for empty input
        Returns:
            EmptyResponse : empty response
        """
        self.open_gripper()

        pose = self.get_pose('spatula')
        logdebug(pose)

        self.arm_move_group.set_max_velocity_scaling_factor(0.5)

        self.pivot(-3*pi/8)
        
        self.tip(1)

        self.extend(.30,-2)

        # grasping spatula
        logdebug(pose)
        self.arm_move_group.set_pose_target(pose)
        success_flag, trajectory_message, planning_time, error_code = self.arm_move_group.plan()
        self.arm_move_group.execute(trajectory_message, wait=True)
        self.arm_move_group.stop()
        self.arm_move_group.clear_pose_targets()

        self.saved_spatula_traj = trajectory_message

        self.grasp(0.01,0.005,0.005,0.3,150)

        # tipping down
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four+0.11, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        # receiving pose of the pancake
        self.pancake_pose = Pose()

        x = self.pancake_coord.position.x
        y = self.pancake_coord.position.y
        
        self.pancake_pose.position.x = x
        self.pancake_pose.position.y = y

        self.pancake_pose.position.z = 0.09 + 0.035
        self.pancake_pose.orientation.x = -0.65337
        self.pancake_pose.orientation.y = -0.232
        self.pancake_pose.orientation.z = -0.28944
        self.pancake_pose.orientation.w = 0.65993

        waypoints = []

        # translating based on the end effector position
        self.ee_pose = self.arm_move_group.get_current_pose()
        self.ee_pose.pose.position.x = self.pancake_pose.position.x + 0.03
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("not able to move this far")
    
        self.pancake_pose.position.y -= 0.47
        self.pancake_pose.position.z = 0.19423
        self.pancake_pose.orientation.x = -0.7497995993015408
        self.pancake_pose.orientation.y = -0.2924575586456358
        self.pancake_pose.orientation.z = -0.21369497944833332
        self.pancake_pose.orientation.w = 0.5537179724705165

        waypoints = []
        waypoints.append(deepcopy(self.pancake_pose))

        # moving to a position just before the pancake
        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)
        self.arm_move_group.execute(plan, wait="True")

        logdebug(self.arm_move_group.get_current_pose())

        self.pancake_pose.position.y += 0.08 + 0.03
        waypoints = []
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.8, 0.8)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("not able to move this close")

        self.pancake_pose.position.z += (0.10 + .015)/2

        waypoints = []
        waypoints.append(deepcopy(self.pancake_pose))

        # picking up the pancake
        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("not able to reach the pancake")

        waypoints = []

        # lift the pancake up prior to flipping
        self.ee_pose = self.arm_move_group.get_current_pose()
        self.ee_pose.pose.position.x = self.pancake_pose.position.x + 0.05
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
            self.flip_spatula()
        else:
            logdebug("not able to lift up")

        self.arm_move_group.set_max_velocity_scaling_factor(0.5)
        self.arm_move_group.set_max_acceleration_scaling_factor(0.1)

        self.extend(.30,-2)

        self.tip(1)

        self.pivot(-3*pi/8)

        self.go_to_ready()

        return EmptyResponse()

    
    def lift_callback(self, event=None):
        """ Callback function for lift service

        Commands the robot to follow a series of waypoints to lift the pancake off of the griddle

        Args:
            event (Empty) : Event holder for empty object
        Returns:
            EmptyResponse : empty response
        """
        self.arm_move_group.set_max_velocity_scaling_factor(0.5)

        self.pivot(-3*pi/8)
        
        self.tip(1)

        self.extend(.30,-2)

        # tipping down
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four+0.11, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        # receiving pose of the pancake
        self.pancake_pose = Pose()

        x = self.pancake_lift_coord.position.x
        y = self.pancake_lift_coord.position.y
        
        self.pancake_pose.position.x = x
        self.pancake_pose.position.y = y

        self.pancake_pose.position.z = 0.09 + 0.035
        self.pancake_pose.orientation.x = -0.65337
        self.pancake_pose.orientation.y = -0.232
        self.pancake_pose.orientation.z = -0.28944
        self.pancake_pose.orientation.w = 0.65993

        waypoints = []

        # translating based on the end effector position
        self.ee_pose = self.arm_move_group.get_current_pose()
        self.ee_pose.pose.position.x = self.pancake_pose.position.x + 0.03
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("not able to move this far")

        logdebug("Moving to position left of pancake")
        self.pancake_pose.position.y -= 0.47 
        self.pancake_pose.position.z = 0.19423
        self.pancake_pose.orientation.x = -0.7497995993015408
        self.pancake_pose.orientation.y = -0.2924575586456358
        self.pancake_pose.orientation.z = -0.21369497944833332
        self.pancake_pose.orientation.w = 0.5537179724705165

        waypoints = []
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)
        self.arm_move_group.execute(plan, wait="True")

        logdebug("Moving to position right of pancake")
        self.pancake_pose.position.y += 0.03 + 0.02 + 0.16
        logdebug(self.pancake_pose.position.y)
        if self.pancake_pose.position.y > -0.063595:
            self.pancake_pose.position.y = -0.048
            logdebug(self.pancake_pose.position.y)
        
        waypoints = []
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("not able to move this close")

        logdebug("Lifting spatula up")
        self.pancake_pose.position.z += 0.10 + .015

        waypoints = []
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("not able to lift")

        #Spinning joint 7 to slide pancake off the spatula
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven+pi/2})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return EmptyResponse()

    def make_pancakes_callback(self, event=None):
        """ Callback function for make pancakes service

        Commands the robot to follow all the actions of making a pancake. Implements the pour, flip, and lift actions.

        Args:
            event (Empty) : Event holder for empty object
        Returns:
            EmptyResponse : empty response
        """
        #Pour
        #self.dyn_tf()
        #self.align_camera()
        self.pour_callback()

        #Wait for signal to flip
        flip_status = rospy.get_param("/flip_time")
        while flip_status != True:
            flip_status = rospy.get_param("/flip_time")
        rospy.logdebug("time to flip")

        #Get pancake location for the flip
        self.pancake_coord = self.get_pose("pancake")
        logdebug(self.pancake_coord)

        #Flip the pancake
        self.flip_callback()
        
        #Wait for 20 seconds to lift
        logdebug('Goodnight')
        rospy.sleep(10)
        logdebug('Good morning')
        rospy.sleep(10)

        logdebug("lifting time")
        rospy.set_param("/flipped", True)

        #Get pancake location for the lift
        self.pancake_lift_coord = self.get_pose("finished_pancake")
        logdebug(self.pancake_lift_coord)

        #Lift the pancake
        self.lift_callback()

        return EmptyResponse()
        
def main():
    """
    the main() function
    """
    rospy.init_node('manipulator', log_level=rospy.DEBUG)
    node = ManipulatorControl()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass