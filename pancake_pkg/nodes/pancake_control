#!/usr/bin/env python

"""
Flipping pancakes 

SERVICES:
    + /flip (Empty) ~ has the robot move to each waypoint and flip the pancake

PARAMETERS:
    + /waypoints ~ waypoints for the robot to follow depending on task

"""

import rospy
import sys
import moveit_commander
from geometry_msgs.msg import PoseStamped, Pose
from moveit_commander.conversions import pose_to_list, list_to_pose
from std_srvs.srv import Empty, EmptyResponse
import actionlib
from franka_gripper.msg import GraspAction, GraspGoal, GraspEpsilon
from rospy.core import logdebug
from math import pi
from visualization_msgs.msg import MarkerArray, Marker
from geometry_msgs.msg import Vector3

class ManipulatorControl:
    def __init__(self):
        super(ManipulatorControl, self).__init__()

        # initialize moveit commander
        moveit_commander.roscpp_initialize(sys.argv)
        
        # parameters
        self.waypoints = rospy.get_param("/waypoints")
        self.spatula_pose = rospy.get_param("spatula_location")
        self.work_table_pose = rospy.get_param("work_table_pose")
        self.work_table_dims = rospy.get_param("work_table_dims")
        self.base_table_pose = rospy.get_param("base_table_pose")
        self.base_table_dims = rospy.get_param("base_table_dims")

        # pubs, subs, servs, etc.
        self.flip = rospy.Service("flip", Empty, self.flip_callback)
        self.pour = rospy.Service("pour", Empty, self.pour_callback)
        self.lift = rospy.Service("lift", Empty, self.lift_callback)
        self.client = actionlib.SimpleActionClient("/franka_gripper/grasp", GraspAction)
        self.marker_pub = rospy.Publisher("markers", MarkerArray, queue_size=10, latch=True)

        # instantiate robot commander object
        self.robot = moveit_commander.RobotCommander()

        # instantiate scene object
        self.scene = moveit_commander.PlanningSceneInterface()

        # instantiate move groups
        self.arm_move_group = moveit_commander.MoveGroupCommander('panda_arm')
        self.gripper_move_group = moveit_commander.MoveGroupCommander('hand')
        
        self.planning_frame = self.arm_move_group.get_planning_frame()

        self.add_work_table()
        self.add_base_table()
        self.load_markers()

        self.lift_waypoints = []

    def wait_for_state_update(self, box_name, box_is_known=False, box_is_attached=False, timeout=4):
        """ Waits until changes are reflected in object lists 

        Ensures that collision updates are made in case the python node dies before publishing.
        Integrated from Interbotix MoveIt Python Move Group Tutorials

        Args: 
            box_name (string) : name of the box being added 
            box_is_known (bool) : if box is in get_known_object_names()
            box_is_attached (bool) : if box is in get_attached_objects()
            timeout (int) : time limit

        Returns:
            False (bool) : false return if the while loop is exited without returning (a timeout)
        
        """
        start = rospy.get_time()
        seconds = rospy.get_time()

        while (seconds - start < timeout) and not rospy.is_shutdown():
            attached_objects = self.scene.get_attached_objects([box_name])
            is_attached = len(attached_objects.keys()) > 0

            is_known = box_name in self.scene.get_known_object_names()

            if (box_is_attached == is_attached) and (box_is_known == is_known):
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()

        return False

    def load_markers(self):
        marker_array = MarkerArray()

        spatula_marker = Marker()
        spatula_marker.header.frame_id = "world"
        spatula_marker.ns = "markers"
        spatula_marker.id = 1
        spatula_marker.type = 2
        spatula_marker.action = 0
        spatula_marker.pose.position.x = self.spatula_pose[0]
        spatula_marker.pose.position.y = self.spatula_pose[1]
        spatula_marker.pose.position.z = self.spatula_pose[2]
        spatula_marker.pose.orientation.w = 1
        spatula_marker.scale = Vector3(x = 0.01, y = 0.01, z = 0.01)
        spatula_marker.color.r = 250. / 255.
        spatula_marker.color.g = 218. / 255.
        spatula_marker.color.b = 221. / 255.
        spatula_marker.color.a = 1

        marker_array.markers.append(spatula_marker)
        self.marker_pub.publish(marker_array)

        return

    def add_work_table(self):
        """ Adds worktable to planning scene

        Places table collision object based on the world frame to the left of robot

        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = self.work_table_pose[0]
        table_pose.pose.position.y = self.work_table_pose[1]
        table_pose.pose.position.z = self.work_table_pose[2]
        table_pose.pose.orientation.w = 1.0
        table_name = "work_table"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(self.work_table_dims[0], self.work_table_dims[1], self.work_table_dims[2]))
    
    def add_base_table(self):
        """ Adds base table to planning scene 

        Places table collision object based on the world frame to front of the robot

        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = self.base_table_pose[0]
        table_pose.pose.position.y = self.base_table_pose[1]
        table_pose.pose.position.z = self.base_table_pose[2]
        table_pose.pose.orientation.w = 1.0
        table_name = "base_table"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(self.base_table_dims[0], self.base_table_dims[1], self.base_table_dims[2]))
    
    def open_gripper(self):
        self.gripper_move_group.set_named_target('open')
        self.gripper_move_group.go()
        self.gripper_move_group.stop()
        self.gripper_move_group.clear_pose_targets()
    
    def close_gripper(self):
        self.gripper_move_group.set_named_target('close')
        self.gripper_move_group.go()
        self.gripper_move_group.stop()
        self.gripper_move_group.clear_pose_targets()

    def go_to_ready(self):

        self.arm_move_group.set_named_target('ready')
        self.arm_move_group.go()
        self.arm_move_group.stop()

    def grasp(self, width, epsilon_inner, epsilon_outer, speed, force):
        """ Uses actions to close gripper 

        Specifies specific width and force with which to grip objects 

        Args: 
            width : width of specified object
            force : force for gripping specified object
        
        """
        self.client.wait_for_server()
        ep = GraspEpsilon(inner = epsilon_inner, outer = epsilon_outer)
        action = GraspGoal()
        action.width = width
        action.epsilon = ep
        action.speed = speed
        action.force = force
        self.client.send_goal(action)
        self.client.wait_for_result(rospy.Duration(15.0))

    def flip_spatula(self):
        """ Moves single joints based on current position 
        
        """
        # two options to get current joint values, current one will save them 
        # joint = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.remember_joint_values("panda_arm")
        joints = self.arm_move_group.get_remembered_joint_values()
        joint = joints["panda_arm"]
        # joint 7 values are between -166 and 166
        logdebug(joint)
        if joint[-1] > 0:
            joint[-1] -= pi
        else:
            joint[-1] += pi
        logdebug(joint)
        self.arm_move_group.set_joint_value_target(joint)
        self.arm_move_group.go()
        self.arm_move_group.stop()
        self.arm_move_group.clear_pose_targets()

    def flip_callback(self, event=None):
        """ Callback function for the flip service 

        Moves the robot to follow waypoints in the parameter server to flip the pancake

        Args: 
            event (Empty) : Event holder for empty input

        Returns:
            EmptyResponse (Empty) : empty response
        
        """
        i = 0
        # if using rpy then euleur to quaternion will give exact movement without offset
        self.open_gripper()

        for waypoint in self.waypoints:
            pose = list_to_pose(waypoint[0])
            gripper = waypoint[1]

            rospy.set_param("/robot_description_planning/default_velocity_scaling_factor", 1.0)
            velocity = rospy.get_param("/robot_description_planning/default_velocity_scaling_factor")
            logdebug(velocity)

            self.arm_move_group.set_pose_target(pose)
            success_flag, trajectory_message, planning_time, error_code = self.arm_move_group.plan()
            self.arm_move_group.execute(trajectory_message, wait=True)
            self.arm_move_group.stop()
            self.arm_move_group.clear_pose_targets()

            if gripper:
                self.close_gripper()
                # self.grasp(width=0.05, epsilon_inner=0.001, epsilon_outer=0.001, speed=0.1, force=10)
            else:
                self.open_gripper()

            if i == 2:
                self.flip_spatula()
            i += 1
            rospy.set_param("/robot_description_planning/default_velocity_scaling_factor", 0.1)
            velocity = rospy.get_param("/robot_description_planning/default_velocity_scaling_factor")
            logdebug(velocity)

        return EmptyResponse()

    def tip(self,joint5):
        one, two, three, four, five, six, seven = self.robot_group.get_current_joint_values()
        self.robot_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': joint5, 'panda_joint6': six, 'panda_joint7': seven})
        self.robot_group.go()
        self.robot_group.stop()

    def spin(self,joint7):

        one, two, three, four, five, six, seven = self.robot_group.get_current_joint_values()
        self.robot_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': joint7})
        self.robot_group.go()
        self.robot_group.stop()

    def pour_callback(self,empty):

        self.open_gripper()

        self.open_gripper()

        pose = Pose()
        pose.position.x = .52304
        pose.position.y = -0.04363
        pose.position.z = .089752
        pose.orientation.x = .58237
        pose.orientation.y = .4014
        pose.orientation.z = -0.40509
        pose.orientation.w = 0.57934
        self.arm_move_group.go(pose, wait="true")
        self.arm_move_group.stop()

        print("Grasping")
        self.grasp(.06,.005,.005,.1,20)

        print("Back to home")
        self.go_to_ready()

        print("Tipping")
        joint5 = -math.pi/2
        joint7 = math.pi/2 + math.pi/4
        self.tip(joint5)
        self.spin(joint7)

        print("Squeezing")
        self.grasp(.04,.005,.005,.1,50)

        print("Return bottle")
        self.spin(0)

        pose = Pose()
        pose.position.x = .52304
        pose.position.y = -0.04363
        pose.position.z = .089752
        pose.orientation.x = .58237
        pose.orientation.y = .4014
        pose.orientation.z = -0.40509
        pose.orientation.w = 0.57934
        self.arm_move_group.go(pose, wait="true")
        self.arm_move_group.stop()

        self.open_gripper()

        self.go_to_ready()

        return []
    
    def lift_callback(self, req):
        """ Callback function for lift service

        Commands the robot to follow a series of wayopints to lift the pancake out of the pan

        Args:
            req

        Returns:
            EmptyResponse (Empty) : empty response
        """

        self.open_gripper()
        
        pose = Pose()
        pose.position.x = self.spatula_pose[0]
        pose.position.y = self.spatula_pose[1]
        pose.position.z = self.spatula_pose[2]+0.01
        pose.orientation.x = 0.711238
        pose.orientation.y = 0.702951
        pose.orientation.z = 0
        pose.orientation.w = 0
        self.arm_move_group.set_pose_target(pose)
        (success_flag, traj_msg, planning_time, error_code) = self.arm_move_group.plan()
        plan = self.arm_move_group.go(wait=True)
        self.arm_move_group.stop()
        self.arm_move_group.clear_pose_targets()

        self.open_gripper()

        return EmptyResponse()


        
def main():
    """
    the main() function
    """
    rospy.init_node('manipulator', log_level=rospy.DEBUG)
    node = ManipulatorControl()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass