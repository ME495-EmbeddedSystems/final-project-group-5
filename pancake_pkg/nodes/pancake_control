#!/usr/bin/env python

"""
This node is responsible for the motion planning of the Franka Emika Panda robot in order to pour batter,
flip pancakes, and lift them off a griddle.

SERVICES:
    + /pour (Empty) ~ commands the robot to pour batter from a bottle onto the griddle
    + /flip (Empty) ~ commands the robot to use a spatula to flip a pancake on the griddle
    + /lift (Empty) ~ commands the robot to use a spatula to lift the pancake off the griddle
ACTIONS:
    + /grasp (GraspAction) ~ action that commands the franka grippers to hold the bottle
PARAMETERS:
    + work_table_pose ~ the pose of the work table
    + work_table_dims ~ the dimensions of the work table
    + base_table_pose ~ the pose of the base table
    + base_table_dims ~ the dimensions of the work table

"""
#from numpy.core.defchararray import _unary_op_dispatcher
from pancake_pkg.transform import TransformToRobot
import numpy as np
import rospy
import sys
import moveit_commander
import geometry_msgs
from geometry_msgs.msg import PoseStamped, Pose, Quaternion, TransformStamped, Vector3
from moveit_commander.conversions import pose_to_list, list_to_pose
from std_srvs.srv import Empty, EmptyResponse
import actionlib
from franka_gripper.msg import GraspAction, GraspGoal, GraspEpsilon
from rospy.core import logdebug, logerror
from math import pi
import numpy as np
from visualization_msgs.msg import MarkerArray, Marker
import tf
from tf import listener, TransformListener
import tf2_ros
from copy import deepcopy
from tf_conversions import transformations
from franka_msgs.srv import SetForceTorqueCollisionBehavior
 
 
class ManipulatorControl:
    def __init__(self):
        super(ManipulatorControl, self).__init__()

        # initialize moveit commander
        moveit_commander.roscpp_initialize(sys.argv)
        logdebug("initialize moveit")
        
        # instantiate robot commander object
        self.robot = moveit_commander.RobotCommander()

        # instantiate scene object
        self.scene = moveit_commander.PlanningSceneInterface()

        # instantiate move groups
        self.arm_move_group = moveit_commander.MoveGroupCommander('panda_arm')
        self.arm_move_group.set_planning_time(5.0)
        self.gripper_move_group = moveit_commander.MoveGroupCommander('hand')
        
        self.planning_frame = self.arm_move_group.get_planning_frame()

        self.work_table_pose = rospy.get_param("work_table_pose")
        self.work_table_dims = rospy.get_param("work_table_dims")
        self.base_table_pose = rospy.get_param("base_table_pose")
        self.base_table_dims = rospy.get_param("base_table_dims")

        rospy.set_param('/pancaked',False)
        rospy.set_param("/flipped", False)

        # pubs, subs, servs, etc.
        self.flip = rospy.Service("flip", Empty, self.flip_callback)
        self.pour = rospy.Service("pour", Empty, self.pour_callback)
        self.lift = rospy.Service("lift", Empty, self.lift_callback)
        self.make_pancakes = rospy.Service("make_pancakes", Empty, self.make_pancakes_callback)
        self.client = actionlib.SimpleActionClient("/franka_gripper/grasp", GraspAction)

        self.link0_atag()

        self.add_work_table()
        self.add_base_table()
        self.add_camera_stand()
        self.add_camera()
        self.add_left_camera_stand()

        self.lift_waypoints = []

        self.tmr = rospy.Timer(rospy.Duration(1/10), self.dyn_tf)
        

    def wait_for_state_update(self, box_name, box_is_known=False, box_is_attached=False, timeout=4):
        """ Waits until changes are reflected in object lists 

        Ensures that collision updates are made in case the python node dies before publishing.
        Integrated from Interbotix MoveIt Python Move Group Tutorials

        Args: 
            box_name (string) : name of the box being added 
            box_is_known (bool) : if box is in get_known_object_names()
            box_is_attached (bool) : if box is in get_attached_objects()
            timeout (int) : time limit

        Returns:
            False (bool) : false return if the while loop is exited without returning (a timeout)
        
        """
        start = rospy.get_time()
        seconds = rospy.get_time()

        while (seconds - start < timeout) and not rospy.is_shutdown():
            attached_objects = self.scene.get_attached_objects([box_name])
            is_attached = len(attached_objects.keys()) > 0

            is_known = box_name in self.scene.get_known_object_names()

            if (box_is_attached == is_attached) and (box_is_known == is_known):
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()

        return False

    def link0_atag(self):
        """ The transform from the table to the world

        Broadcasts the transform from the table's april tag to the world frame
        
        Args:
            None
        Returns:
            None
        """
        static_broadcaster = tf2_ros.StaticTransformBroadcaster()
        link0_atag_tf = TransformStamped()
        link0_atag_tf.header.stamp = rospy.Time.now()
        link0_atag_tf.header.frame_id = "table_tag" 
        link0_atag_tf.child_frame_id = "world"
        link0_atag_tf.transform.translation.x = -0.1143
        link0_atag_tf.transform.translation.y = -0.1111
        link0_atag_tf.transform.translation.z = 0.0
        #link0_atag_tf.transform.rotation = self.robot_atag_q
        #q1 = transformations.quaternion_about_axis(0, [0, 0, 1])
        q2 = transformations.quaternion_from_euler(0, 0, -np.pi/4)
        logdebug(q2)
        link0_atag_tf.transform.rotation.w = 1
        static_broadcaster.sendTransform(link0_atag_tf)

    def align_camera(self, event=None):
        """ Aligns the camera using the transform tree

        Looks up the transformation from the world to the camera and sets offsets
        
        Args:
            None
        Returns:
            None
        """
        broadcaster = tf2_ros.TransformBroadcaster()
        tf_time = rospy.Time.now()
        listen = TransformListener()
        listen.waitForTransform('/world','/camera_color_optical_frame',rospy.Time(), rospy.Duration(4.0))
        (trans, rot) = listen.lookupTransform('/world', '/camera_color_optical_frame', rospy.Time(0))
        
        # Bottle tag in real life:
        bottle_irl = [0.1905, 0.13335, 0.0889]

        # Bottle tag in world:
        bottle_world = [0.1582140605076095, 0.2797960560533358, 0.41160352659259514]

        self.camera_offset = [bottle_irl[0] - bottle_world[0], bottle_irl[1]-bottle_world[1], bottle_irl[2]-bottle_world[2]]

        self.un_rotation = [-1*rot[0], -1*rot[1], -1*rot[2],-1*rot[3]]

    def dyn_tf(self, event=None):
        """ The timer callback function.

        Broadcasts the transform from the camera to the pancake, when applicable
        
        Args:
            event (None)
        Returns:
            None
        """
        flag = rospy.get_param("/flip_time")
        self.align_camera()
        # logdebug("aligning camera?")

        if flag:
            logdebug("trying to find the pancake")
            self.pancake = rospy.get_param("/flip_location") #position of pancake in camera frame
            logdebug("got the pancake location")
            broadcaster = tf2_ros.TransformBroadcaster()
            # Add Odometry to base_footprint in tf
            tf_time = rospy.Time.now()
            pancake_tf = TransformStamped()
            pancake_tf.header.stamp = tf_time
            pancake_tf.header.frame_id = "camera_color_optical_frame"
            pancake_tf.child_frame_id = "pancake"
            # Update x, y, and z positions
            # atag_bottle_tf.transform.translation.x = (self.bottle[0] - self.robot_atag_q[0])/1000
            # atag_bottle_tf.transform.translation.y = (self.bottle[1] - self.robot_atag_q[1])/1000
            # atag_bottle_tf.transform.translation.z = (self.bottle[2] - self.robot_atag_q[2])/1000
            pancake_tf.transform.translation.x = (self.pancake[0])/1000
            pancake_tf.transform.translation.y = (self.pancake[1])/1000
            pancake_tf.transform.translation.z = (self.pancake[2])/1000
            # Quaternion of the angle about the z axis
            # q1 = transformations.quaternion_about_axis(0, [0, 0, 1])
            pancake_tf.transform.rotation = Quaternion(*self.un_rotation)
            # Send the transform
            # logdebug(atag_bottle_tf)
            broadcaster.sendTransform(pancake_tf)
        else:
            rospy.logerr_once("Haven't found a pancake yet")

    def ee_offset(self, pose):
        """ Offsets the pose due to the end-effector

        Function that takes in a pose and offsets it according to the offset of the end-effector

        Args:
            pose (geometry_msgs/Pose) : the pose to be offset by
        Returns:
            geometry_msgs/Pose : the offsetted pose
        """
        pose.position.x += 0.02
        pose.position.y += 0.0358
        pose.position.z += 0

        return pose 

    def add_work_table(self):
        """ Adds worktable to planning scene

        Places table collision object based on the world frame to the left of robot

        Args:
            None
        Returns:
            None
        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = self.work_table_pose[0]
        table_pose.pose.position.y = self.work_table_pose[1]
        table_pose.pose.position.z = self.work_table_pose[2] - .2
        table_pose.pose.orientation.w = 1.0
        table_name = "work_table"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(self.work_table_dims[0], self.work_table_dims[1], self.work_table_dims[2]))
    
    def add_base_table(self):
        """ Adds base table to planning scene 

        Places table collision object based on the world frame to front of the robot
        Args:
            None
        Returns:
            None
        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = self.base_table_pose[0]
        table_pose.pose.position.y = self.base_table_pose[1]
        table_pose.pose.position.z = self.base_table_pose[2] - .05
        table_pose.pose.orientation.w = 1.0
        table_name = "base_table"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(self.base_table_dims[0], self.base_table_dims[1], self.base_table_dims[2]))
    
    def add_camera_stand(self):
        """ Adds camera stand to planning scene 

        Places camera stand collision object based on the world frame to right of the robot

        Args:
            None
        Returns:
            None

        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = -0.3
        table_pose.pose.position.y = 0.3
        table_pose.pose.position.z = self.base_table_pose[2]
        table_pose.pose.orientation.w = 1.0
        table_name = "camera_stand"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(0.0254, 0.0254, 4.0))

    def add_left_camera_stand(self):
        """ Adds left camera stand to planning scene 

        Places camera stand collision object based on the world frame to left of the robot

        Args:
            None
        Returns:
            None

        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = -0.3
        table_pose.pose.position.y = -0.3
        table_pose.pose.position.z = self.base_table_pose[2]
        table_pose.pose.orientation.w = 1.0
        table_name = "left_camera_stand"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(0.0254, 0.0254, 4.0))

    def add_camera(self):
        """ Adds camera to planning scene 

        Places camera collision object based on the world frame to right of the robot

        Args:
            None
        Returns:
            None
        """
        table_pose = PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = -0.3
        table_pose.pose.position.y = 0.3
        table_pose.pose.position.z = 0.7
        table_pose.pose.orientation.w = 1.0
        table_name = "camera"
        while not self.wait_for_state_update(table_name, box_is_known=True):
            self.scene.add_box(table_name, table_pose, size=(0.5, 0.0254, 0.0254))

    def open_gripper(self):
        """ Opens the grippers

        Sets the target pose of the gripper to OPEN

        Args:
            None
        Returns:
            None
        """
        self.gripper_move_group.set_named_target('open')
        self.gripper_move_group.go()
        self.gripper_move_group.stop()
        self.gripper_move_group.clear_pose_targets()
    
    def close_gripper(self):
        """ Closes the grippers

        Sets the target pose of the grippers to CLOSE

        Args:
            None
        Returns:
            None
        """
        self.gripper_move_group.set_named_target('close')
        self.gripper_move_group.go()
        self.gripper_move_group.stop()
        self.gripper_move_group.clear_pose_targets()

        return

    def go_to_ready(self):
        """ Commands the robot arm to the ready position

        Sets the target pose of the arm move group to READY

        Args:
            None
        Returns:
            None

        """
        self.arm_move_group.set_named_target('ready')
        self.arm_move_group.go()
        self.arm_move_group.stop()
        return
        
    def grasp(self, width, epsilon_inner, epsilon_outer, speed, force):
        """ Uses actions to close gripper 
        Specifies specific width and force with which to grip objects 
        Args: 
            width (float) : width of specified objectAligns the camera by looking at the transform tree
            epsilon_inner (float) : 
            epsilon_outer (float) :
            speed (float) :
            force (float) : force for gripping specified object
        Returns:
            None
        
        """
        self.client.wait_for_server()
        ep = GraspEpsilon(inner = epsilon_inner, outer = epsilon_outer)
        action = GraspGoal()
        action.width = width
        action.epsilon = ep
        action.speed = speed
        action.force = force
        self.client.send_goal(action)
        self.client.wait_for_result(rospy.Duration(15.0))

        return

    def flip_spatula(self):
        """ Moves single joint based on current position

        Commands the last joint to rotate in order to flip the spatula

        Args:
            None
        Returns:
            None
        """
        self.arm_move_group.set_max_velocity_scaling_factor(0.95)
        self.arm_move_group.set_max_acceleration_scaling_factor(1.0)
        self.arm_move_group.remember_joint_values("panda_arm")
        joints = self.arm_move_group.get_remembered_joint_values()
        joint = joints["panda_arm"]
        joint[-1] = pi/2
        # joint[-1] = -2.8
        self.arm_move_group.set_joint_value_target(joint)
        self.arm_move_group.go()
        self.arm_move_group.stop()
        self.arm_move_group.clear_pose_targets()
        return

    def flip_callback(self, event=None):
        """ Callback function for the flip service 
        
        Moves the robot to follow waypoints in the parameter server to flip the pancake
        
        Args: 
            event (Empty) : Event holder for empty input
        Returns:
            EmptyResponse : empty response
        """
        self.open_gripper()

        pose = self.get_pose('spatula')
        logdebug(pose)

        # if pose.position.z <= .06 + 0.035:
        #     pose.position.z = 0.065 + 0.035

        self.arm_move_group.set_max_velocity_scaling_factor(0.5)

        self.pivot(-3*pi/8)
        
        self.tip(1)

        self.extend(.30,-2)

        logdebug(pose)
        self.arm_move_group.set_pose_target(pose)
        success_flag, trajectory_message, planning_time, error_code = self.arm_move_group.plan()
        self.arm_move_group.execute(trajectory_message, wait=True)
        self.arm_move_group.stop()
        self.arm_move_group.clear_pose_targets()

        # waypoints = []
        
        # waypoints.append(deepcopy(pose))

        # moveit_robot_state = self.robot.get_current_state()

        # (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        # plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.2, 0.2)
        # self.arm_move_group.execute(plan, wait="True")
        
        #self.spin(self.grasp_offset)

        self.saved_spatula_traj = trajectory_message
        # self.saved_spatula_traj = plan

        # self.grasp(0.01,0.005,0.005,0.3,500)
        self.grasp(0.01,0.005,0.005,0.3,150)
        # self.tip(1.27)
        # self.pancake

        # tipping down - originally 0.07
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four+0.11, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        # self.spatula_pose = self.arm_move_group.get_current_pose()

        # tipping up
        # one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        # self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two+0.07, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven})
        # self.arm_move_group.go()
        # self.arm_move_group.stop()

        # one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        # self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six+0.15, 'panda_joint7': seven})
        # self.arm_move_group.go()
        # self.arm_move_group.stop()
        # try: 
        #     pancake_copy = deepcopy(self.saved_pancake_pose.pose)
        #     self.pancake_pose = pancake_copy
        # except:
        #     logdebug('Saved pancake pose not found')
        #     self.pancake_pose = Pose()
        #     self.pancake_pose.position.x = 0.2813242885332488 #0.2962857892236259
        #     self.pancake_pose.position.y = 0.11798261990992079 #0.23646999765280124

        self.pancake_pose = Pose()

        x = self.pancake_coord.position.x
        y = self.pancake_coord.position.y
        
        self.pancake_pose.position.x = x
        self.pancake_pose.position.y = y

        self.pancake_pose.position.z = 0.09 + 0.035
        self.pancake_pose.orientation.x = -0.65337
        self.pancake_pose.orientation.y = -0.232
        self.pancake_pose.orientation.z = -0.28944
        self.pancake_pose.orientation.w = 0.65993

        waypoints = []

        self.ee_pose = self.arm_move_group.get_current_pose()
        #self.ee_pose.pose.position.x = self.pancake_pose.pose.position.x
        self.ee_pose.pose.position.x = self.pancake_pose.position.x + 0.03
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("makis :(")
    

        self.pancake_pose.position.y -= 0.47    #0.45    #0.40 #- .03
        # self.pancake_pose.position.z -= 0.0025   # old one
        self.pancake_pose.position.z = 0.19423
        # self.pancake_pose.orientation.x = 0.58062
        # self.pancake_pose.orientation.y = 0.55831
        # self.pancake_pose.orientation.z = 0.40936
        # self.pancake_pose.orientation.w = -0.42848

        self.pancake_pose.orientation.x = -0.7497995993015408
        self.pancake_pose.orientation.y = -0.2924575586456358
        self.pancake_pose.orientation.z = -0.21369497944833332
        self.pancake_pose.orientation.w = 0.5537179724705165

        #self.pancake_pose.pose.position.y -= 0.40 
        # pose.position.z += 0.20
        # waypoints.append(deepcopy(self.pancake_pose.pose))
        waypoints = []
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)
        # self.arm_move_group.execute(plan, wait="True")
        # self.arm_move_group.execute(plan, wait="True")
        self.arm_move_group.execute(plan, wait="True")

        # if fraction >= 0.9:
        #     self.arm_move_group.execute(plan, wait="True")
        # else:
        #     logdebug("sakis :(")

        # one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        # self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven+pi/4})
        # self.arm_move_group.go()
        # self.arm_move_group.stop()

        logdebug(self.arm_move_group.get_current_pose())

        #self.pancake_pose.pose.position.y += 0.03
        self.pancake_pose.position.y += 0.08 + 0.03
        # self.pancake_pose.position.z += 0.0005
        waypoints = []
        # waypoints.append(deepcopy(self.pancake_pose.pose))
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.8, 0.8)
        # self.arm_move_group.execute(plan, wait="True")

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("takis :(")

        #self.pancake_pose.pose.position.z += 0.10
        self.pancake_pose.position.z += (0.10 + .015)/2
        #waypoints.append(deepcopy(self.pancake_pose.pose))
        waypoints = []
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)
        # self.arm_move_group.execute(plan, wait="True")

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
            # self.flip_spatula()
        else:
            logdebug("please re-plan")

        waypoints = []

        self.ee_pose = self.arm_move_group.get_current_pose()
        #self.ee_pose.pose.position.x = self.pancake_pose.pose.position.x
        self.ee_pose.pose.position.x = self.pancake_pose.position.x + 0.05
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
            self.flip_spatula()
        else:
            logdebug("please re-plan")

        # # sliding forward
        # one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        # self.arm_move_group.set_joint_value_target({'panda_joint1': one + pi/4, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four - .05, 'panda_joint5': five, 'panda_joint6': six + .07, 'panda_joint7': seven})
        # self.arm_move_group.go()
        # self.arm_move_group.stop()

        self.arm_move_group.set_max_velocity_scaling_factor(0.5)
        self.arm_move_group.set_max_acceleration_scaling_factor(0.1)

        self.extend(.30,-2)

        self.tip(1)

        self.pivot(-3*pi/8)

        self.go_to_ready()

        return EmptyResponse()

    def tip(self,joint5):
        """ Tips the end of the arm

        Commands joint 5 in order to tip the arm to a user-specified position

        Args:
            joint5 (float) : the angle to command joint 5 to
        Returns:
            None
        """
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': joint5, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return

    def spin(self,joint7):
        """ Spins the end of the arm

        Commands joint 7 in order to spin the gripper to a user-specified position

        Args:
            joint7 (float) : the angle to command joint 7 to
        Returns:
            None
        """
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': joint7})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return

    def pivot(self,joint1):
        """ Pivots the arm

        Commands joint 1 to pivot the arm to a user-specified position

        Args:
            joint1 (float) : the angle to command joint 1 to
        Returns:
            None
        """
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': joint1, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return

    def extend(self, joint2, joint4):
        """ Extends the arm

        Commands joint 2 and joint 4 to extend the arm to a user-specified position

        Args:
            joint2 (float) : the angle to command joint 2 to
            joint4 (float) : the angle to command joint 4 to
        Returns:
            None
        """
        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': joint2, 'panda_joint3': three, 'panda_joint4': joint4, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return

    def pour_callback(self, empty=None):
        """ The pour callback function

        Commands the robot to pick up the bottle and pour batter onto the griddle

        Args:
            event (Empty) : Event holder for empty input
        Returns:
            EmptyResponse : empty response
        """

        self.open_gripper()
        pose = self.get_pose('bottle')
        logdebug(pose)

        # pose.position.z -= 0.178
        # pose.position.x += 0.0
        pose.position.y += 0.05

        # pose.position.z -= 0.178
        # pose.position.x += 0.0
        # pose.position.y -= 0.25


        if pose.position.z <= .06:
            pose.position.z = 0.065

        self.arm_move_group.set_max_velocity_scaling_factor(0.5)

        self.pivot(pi/4)

        self.tip(-1)

        self.extend(.34,-1.9)

        # self.pivot(-3*pi/8)
        
        # self.tip(1)

        # self.extend(.30,-2)

        # self.arm_move_group.go(pose, wait="true")
        # self.arm_move_group.stop()

        waypoints = []

        waypoints.append(deepcopy(pose))

        moveit_robot_state = self.robot.get_current_state()
        
        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)
        
        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("trajectory failed :(")


        # logdebug(pose)
        # self.arm_move_group.set_pose_target(pose)
        # success_flag, trajectory_message, planning_time, error_code = self.arm_move_group.plan()
        # self.arm_move_group.execute(trajectory_message, wait=True)
        # self.arm_move_group.stop()
        # self.arm_move_group.clear_pose_targets()

        print("Grasping")
        # self.grasp(.05,.005,.005,.3, 20)
        # self.grasp(.06,.005,.005,.3, 20)
        self.grasp(.065,.01,.01,.3, 35)

        # print("Back to home")
        # self.go_to_ready()

        # self.spin(-pi/4) #jackson added to turn bottle away from robot

        waypoints = []

        self.ee_pose = self.arm_move_group.get_current_pose()
        #self.ee_pose.pose.position.x = self.pancake_pose.pose.position.x
        self.ee_pose.pose.position.z = pose.position.z + 0.01
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("please re-plan")

        self.pivot(.96)

        #self.extend(-.1, -2.5)
        self.extend(-.08,-2.7)

        self.arm_move_group.set_max_velocity_scaling_factor(0.9)
        self.arm_move_group.set_max_acceleration_scaling_factor(0.9)

        print("Tipping")
        joint5 = -.96 #-pi/2
        joint7 = -2.7
        self.tip(joint5)
        self.spin(joint7)

        self.arm_move_group.set_max_velocity_scaling_factor(0.5)
        self.arm_move_group.set_max_acceleration_scaling_factor(0.1)

        self.saved_pancake_pose = self.arm_move_group.get_current_pose()
        
        rospy.set_param('/saved_pancake_pose',[self.saved_pancake_pose.pose.position.x,self.saved_pancake_pose.pose.position.y,self.saved_pancake_pose.pose.position.z])
        logdebug(self.saved_pancake_pose)

        print("Squeezing")
        # self.grasp(.05,.01,.01,.1,50)
        # self.grasp(.05,.01,.01,.3, 10)    # these work 

        # rospy.sleep(2)                    # these work

        self.grasp(.045,.01,.01,.3, 10)    

        rospy.sleep(12)

        # self.grasp(.06,.005,.005,.3, 20)

        # self.go_to_ready()

        self.spin(0)

        self.pivot(pi/4)

        self.tip(-1)

        self.extend(.34,-1.9)

        print("Return bottle")

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        self.arm_move_group.execute(plan, wait="True")

        # self.arm_move_group.set_pose_target(pose)
        # success_flag, trajectory_message, planning_time, error_code = self.arm_move_group.plan()
        # self.arm_move_group.execute(trajectory_message, wait=True)
        # self.arm_move_group.stop()
        # self.arm_move_group.clear_pose_targets()

        self.open_gripper()

        waypoints = []

        self.ee_pose = self.arm_move_group.get_current_pose()
        #self.ee_pose.pose.position.x = self.pancake_pose.pose.position.x
        self.ee_pose.pose.position.z = pose.position.z + 0.06
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("please re-plan")

        self.pivot(pi/4)

        self.go_to_ready()

        rospy.set_param('/pancaked',True)

        # self.make_pancakes()

        return EmptyResponse()

    def get_pose(self, name):
        """ Gets the pose of a user-specified object
        
        Computes computes the pose necessary for the arm to reach the user-specified object

		Args:
            name (string) : the object to get the pose of
		Returns:
			geometry_msgs/Pose : the pose for the end-effector
		"""

        if name == "pancake": 
            
            listen = TransformListener()
            while True:
                try:
                    self.dyn_tf()
                    logdebug(rospy.get_param("/flip_location"))
                    listen.waitForTransform('/panda_link0','/flip_location',rospy.Time(), rospy.Duration(4.0))
                    break
                except:
                    logerror("Where is the pancake transform bro???")
                    continue
            
            (trans, rot) = listen.lookupTransform('/panda_link0', '/flip_location', rospy.Time(0))

            logdebug(trans)

            obj_pos = trans

        elif name == "finished_pancake": 
            #obj_pos = self.bottle
            listen = TransformListener()
            while True:
                try:
                    self.dyn_tf()
                    listen.waitForTransform('/panda_link0','/lift_location',rospy.Time(), rospy.Duration(4.0))
                    break
                except:
                    logerror("Do you even lift bro???")
                    continue
            
            (trans, rot) = listen.lookupTransform('/panda_link0', '/lift_location', rospy.Time(0))

            logdebug(trans)

            obj_pos = trans
        
        elif name == "spatula": 
            listen = TransformListener()
            while True:
                try:
                    listen.waitForTransform('/panda_link0','/spatula_tag',rospy.Time(), rospy.Duration(4.0))
                    break
                except:
                    logerror("Where is the spatula transform bro???")
                    continue
            
            (trans, rot) = listen.lookupTransform('/panda_link0', '/spatula_tag', rospy.Time(0))
            # try:ssh
            #     listen.waitForTransform('/panda_link0','/spatula_tag',rospy.Time(), rospy.Duration(4.0))
            #     (trans, rot) = listen.lookupTransform('/panda_link0', '/spatula_tag', rospy.Time(0))
            #     self.prev_spatula_trans = trans
            #     self.prev_spatula_rot = rot
            # except:
            #     trans = self.prev_spatula_trans
            #     rot = self.prev_spatula_rot

            logdebug(trans)
            # atag_offset = [0.05,-0.08,-0.12]
            # atag_offset = [0.05,-0.08,-0.114]
            # atag_offset = [0.05,-0.068,-0.102]
            atag_offset = [0.05,-0.063,-0.102]


            obj_pos = [trans[0] + self.camera_offset[0] + atag_offset[0], trans[1] + self.camera_offset[1] + atag_offset[1], trans[2] + self.camera_offset[1] + atag_offset[2]]
            #obj_pos = [trans[0] + self.camera_offset[0], trans[1] + self.camera_offset[1], trans[2] + self.camera_offset[1]]
            rot_angle = transformations.euler_from_quaternion(rot)
            self.grasp_offset = rot_angle[2] - pi/2

        elif name == "bottle": 
            #obj_pos = self.bottle
            listen = TransformListener()
            while True:
                try:
                    listen.waitForTransform('/panda_link0','/bottle_tag',rospy.Time(), rospy.Duration(4.0))
                    break
                except:
                    logerror("Where is the bottle transform bro???")
                    continue              
            
            (trans, rot) = listen.lookupTransform('/panda_link0', '/bottle_tag', rospy.Time(0))
            
            # try:
            #     listen.waitForTransform('/panda_link0','/bottle_tag',rospy.Time(), rospy.Duration(4.0))
            #     (trans, rot) = listen.lookupTransform('/panda_link0', '/bottle_tag', rospy.Time(0))
            #     self.prev_bottle_trans = trans
            #     self.prev_bottle_rot = rot
            # except:
            #     trans = self.prev_bottle_trans
            #     rot = self.prev_bottle_rot

            logdebug(trans)

            # Added ee_offset values here, may or may not work!!!!!
            obj_pos = [trans[0] + self.camera_offset[0] + 0.02, trans[1] + self.camera_offset[1] + 0.0158, trans[2] + self.camera_offset[2] + .02]

        else: 
            KeyError("Object does not exist")
        
        tf = TransformToRobot(name, obj_pos)
        logdebug(obj_pos)
        logdebug(tf)
        pose_list = tf.compute()
        pose = list_to_pose(pose_list)
        # pose = self.ee_offset(pose)
        return pose
    
    def lift_callback(self, event=None):
        """ Callback function for lift service

        Commands the robot to follow a series of waypoints to lift the pancake off of the griddle

        Args:
            event (Empty) : Event holder for empty object
        Returns:
            EmptyResponse : empty response
        """
        self.arm_move_group.set_max_velocity_scaling_factor(0.5)

        self.pivot(-3*pi/8)
        
        self.tip(1)

        self.extend(.30,-2)

        # self.arm_move_group.set_pose_target(pose)
        # success_flag, trajectory_message, planning_time, error_code = self.arm_move_group.plan()
        # self.arm_move_group.execute(self.saved_spatula_traj, wait=True)
        # self.arm_move_group.stop()
        # self.arm_move_group.clear_pose_targets()

        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four+0.11, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        # self.lift_coords = rospy.get_param("/lift_location")

        # try:
        #     pancake_copy = deepcopy(self.saved_pancake_pose.pose)
        #     self.pancake_pose = pancake_copy
        #     # self.pancake_pose = self.saved_pancake_pose.pose
        # except:
        #     # pose = self.get_pose('pancake')
        #     logdebug('Saved pancake pose not found')
        #     self.pancake_pose = Pose()
        #     self.pancake_pose.position.x = 0.2813242885332488 #0.29720414417292834
        #     self.pancake_pose.position.y = 0.11798261990992079 #0.2658212736204737

            # self.pancake_pose.orientation.x = -0.629614
            # self.pancake_pose.orientation.y = -0.28868
            # self.pancake_pose.orientation.z = -0.348472
            # self.pancake_pose.orientation.w = 0.631521

        self.pancake_pose = Pose()

        x = self.pancake_lift_coord.position.x
        y = self.pancake_lift_coord.position.y
        
        self.pancake_pose.position.x = x
        self.pancake_pose.position.y = y

        self.pancake_pose.position.z = 0.09 + 0.035
        self.pancake_pose.orientation.x = -0.65337
        self.pancake_pose.orientation.y = -0.232
        self.pancake_pose.orientation.z = -0.28944
        self.pancake_pose.orientation.w = 0.65993

        waypoints = []

        self.ee_pose = self.arm_move_group.get_current_pose()
        #self.ee_pose.pose.position.x = self.pancake_pose.pose.position.x
        self.ee_pose.pose.position.x = self.pancake_pose.position.x + 0.03
        waypoints.append(deepcopy(self.ee_pose.pose))

        moveit_robot_state = self.robot.get_current_state()

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("makis :(")

        logdebug("Moving to position left of pancake")
        #self.pancake_pose.pose.position.y -= 0.40 
        self.pancake_pose.position.y -= 0.47    #0.45 #- .03
        self.pancake_pose.position.z = 0.19423
        # pose.position.z += 0.20
        #waypoints.append(deepcopy(self.pancake_pose.pose))
        # waypoints.append(deepcopy(self.pancake_pose))

        self.pancake_pose.orientation.x = -0.7497995993015408
        self.pancake_pose.orientation.y = -0.2924575586456358
        self.pancake_pose.orientation.z = -0.21369497944833332
        self.pancake_pose.orientation.w = 0.5537179724705165

        waypoints = []
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)
        # self.arm_move_group.execute(plan, wait="True")
        # self.arm_move_group.execute(plan, wait="True")
        self.arm_move_group.execute(plan, wait="True")

        logdebug("Moving to position right of pancake")
        #self.pancake_pose.pose.position.y += 0.03
        self.pancake_pose.position.y += 0.03 + 0.02 + 0.16
        logdebug(self.pancake_pose.position.y)
        if self.pancake_pose.position.y > -0.063595:
            self.pancake_pose.position.y = -0.048
            logdebug(self.pancake_pose.position.y)
        
        waypoints = []
        #waypoints.append(deepcopy(self.pancake_pose.pose))
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)
        # self.arm_move_group.execute(plan, wait="True")

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("takis :(")

        logdebug("Lifting spatula up")
        #self.pancake_pose.pose.position.z += 0.10
        self.pancake_pose.position.z += 0.10 + .015
        waypoints = []
        #waypoints.append(deepcopy(self.pancake_pose.pose))
        waypoints.append(deepcopy(self.pancake_pose))

        (plan, fraction) = self.arm_move_group.compute_cartesian_path(waypoints, 0.01, 0.0)
        plan=self.arm_move_group.retime_trajectory(moveit_robot_state,plan,0.5, 0.5)
        # self.arm_move_group.execute(plan, wait="True")

        if fraction == 1.0:
            self.arm_move_group.execute(plan, wait="True")
        else:
            logdebug("noooo :(")

        one, two, three, four, five, six, seven = self.arm_move_group.get_current_joint_values()
        self.arm_move_group.set_joint_value_target({'panda_joint1': one, 'panda_joint2': two, 'panda_joint3': three, 'panda_joint4': four, 'panda_joint5': five, 'panda_joint6': six, 'panda_joint7': seven+pi/2})
        self.arm_move_group.go()
        self.arm_move_group.stop()

        return EmptyResponse()

    def make_pancakes_callback(self, event=None):
        self.pour_callback()

        flip_status = rospy.get_param("/flip_time")
        while flip_status != True:
            flip_status = rospy.get_param("/flip_time")
        rospy.logdebug("time to flip")

        self.tmr = rospy.Timer(rospy.Duration(1/10), self.dyn_tf)

        self.pancake_coord = self.get_pose("pancake")

        logdebug(self.pancake_coord)

        self.flip_callback()
        
        logdebug('Goodnight')

        rospy.sleep(10)

        logdebug('Good morning')

        self.tmr = rospy.Timer(rospy.Duration(1/10), self.dyn_tf)

        rospy.sleep(10)

        logdebug("lifting time")
        rospy.set_param("/flipped", True)

        self.pancake_lift_coord = self.get_pose("finished_pancake")

        logdebug(self.pancake_lift_coord)
        self.lift_callback()

        return EmptyResponse()
        
def main():
    """
    the main() function
    """
    rospy.init_node('manipulator', log_level=rospy.DEBUG)
    node = ManipulatorControl()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass