#!/usr/bin/env python

"""
This node is responsible for adjusting the torque and force threshold parameters on the Franka Emika Panda robot,
this adjusts the reflexive response of the robot during execution of cartesian paths.

CLIENTS:
    + /franka_control/set_force_torque_collision_behavior (SetForceTorqueCollisionBehavior) ~ adjusts the threshold parameters of the robot
"""

from pancake_pkg.transform import TransformToRobot
import numpy as np
import rospy
import sys
import moveit_commander
import geometry_msgs
from geometry_msgs.msg import PoseStamped, Pose, Quaternion, TransformStamped, Vector3
from moveit_commander.conversions import pose_to_list, list_to_pose
from std_srvs.srv import Empty, EmptyResponse, Trigger
import actionlib
from franka_gripper.msg import GraspAction, GraspGoal, GraspEpsilon
from rospy.core import logdebug, logerror
from math import pi
import numpy as np
from visualization_msgs.msg import MarkerArray, Marker
import tf
from tf import listener, TransformListener
import tf2_ros
from copy import deepcopy
from tf_conversions import transformations
from franka_msgs.srv import SetForceTorqueCollisionBehavior

class cartesian_control:

    def update_threshold(self):
        ## Cartesian Threshold ##
        lowerf = rospy.get_param("/franka_control/collision_config/lower_force_thresholds_nominal")
        logdebug("got first param")
        # lowert = rospy.get_param("/franka_control/collision_config/lower_torque_thresholds_nominal")
        lowert = [39, 40, 40, 40, 40, 40, 40]
        force = [20, 20, 20, 20, 20, 20]
        # lowertnew = [i=40 for i in lowert]
        # rospy.get_param("/franka_control/collision_config/upper_force_thresholds_nominal")
        upperf = rospy.get_param("/franka_control/collision_config/upper_force_thresholds_nominal")
        logdebug("got second param")
        # uppert = rospy.get_param("/franka_control/collision_config/upper_torque_thresholds_nominal")
        # uppertnew = [i=40 for i in uppert]
        rospy.set_param("/franka_control/collision_config/lower_torque_thresholds_nominal", lowert)
        logdebug("set first param")
        rospy.set_param("/franka_control/collision_config/upper_torque_thresholds_nominal", lowert)
        logdebug("set second param")
        rospy.set_param("/franka_control/collision_config/upper_force_thresholds_nominal", force)
        rospy.set_param("/franka_control/collision_config/lower_force_thresholds_nominal", force)

        self.torque = rospy.ServiceProxy('/franka_control/set_force_torque_collision_behavior', SetForceTorqueCollisionBehavior)
        logdebug("service proxy")

        please = self.torque(lowert, lowert, force, force)
        if please.success == True:
            success = True
            error_msg = "Did it!"
        else:
            success = False
            error_msg = "Didn't do it :("

        logdebug(error_msg)
        
        return error_msg

def main():
    """
    the main() function
    """
    
    rospy.init_node('cartesian_control', log_level=rospy.DEBUG)
    node = cartesian_control()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass