<launch>
    <arg name="use_sim"                         default="true"/>
    <arg name="fake_node"                       default="true"/>

    <arg name="pipeline"                        default="ompl" />
    <arg name="db"                              default="false" />
    <arg name="db_path"                         default="$(find panda_moveit_config)/default_warehouse_mongo_db" />
    <arg name="debug"                           default="false" />
    <arg name="load_gripper"                    default="true" />
    <arg name="load_robot_description"          default="true"/>
    <arg name="fake_execution_type"             default="interpolate" />
    <arg name="transmission" />
    <arg name="use_gui"                         default="false" />
    <arg name="use_rviz"                        default="true" />
    <arg name="rviz_tutorial"                   default="false" />

    <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world panda_link0" />

    <group if="$(arg use_sim)">

        <group if="$(arg fake_node)">
            <!-- We do not have a real robot connected, so publish fake joint states via a joint_state_publisher
                MoveIt's fake controller's joint states are considered via the 'source_list' parameter -->
            <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
                <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
            </node>
            <!-- If desired, a GUI version is available allowing to move the simulated robot around manually
                This corresponds to moving around the real robot without the use of MoveIt. -->
            <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
                <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
            </node>

            <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
        </group>

        <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
        <include file="$(find panda_moveit_config)/launch/move_group.launch" pass_all_args="true">
            <arg name="allow_trajectory_execution" value="true" />
            <arg name="info" value="true" />
        </include>

    </group>

    <group unless="$(arg use_sim)">
        <include file="$(find panda_moveit_config)/launch/panda_moveit.launch">
            <arg name="load_gripper" value="$(arg load_gripper)"/>
        </include>
    </group>

    <!-- Run Rviz and load the default config to see the state of the move_group node -->
    <include file="$(find panda_moveit_config)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
        <arg name="rviz_tutorial" value="$(arg rviz_tutorial)"/>
        <arg name="rviz_config" value="$(dirname)/moveit.rviz"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>

    <!-- If database loading was enabled, start mongodb as well -->
    <include file="$(find panda_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
        <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
    </include>

    <!-- yaml files for parameter server go here -->
    <rosparam command="load" file="$(find pancake_pkg)/config/waypoints.yaml"/>
    <rosparam command="load" file="$(find pancake_pkg)/config/object_poses.yaml"/>

    <!-- team-written nodes go here -->
    <node name="pancake_control" pkg="pancake_pkg" type="pancake_control" output="screen"/>



</launch>