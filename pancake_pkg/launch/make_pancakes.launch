<launch>
    <arg name="use_sim"                       default="true"/>

    <arg name="pipeline"                      default="chomp" />
    <arg name="load_gripper"                  default="true" />
    <arg name="load_robot_description"        default="true"/>
    <arg name="execution_type"                default="interpolate"/>
    <arg name="use_gui"                       default="false" />

    <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world panda_link0" />

    <group if="$(arg use_sim)">
        <!-- We do not have a real robot connected, so publish fake joint states via a joint_state_publisher
            MoveIt's fake controller's joint states are considered via the 'source_list' parameter -->
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
        <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
        </node>
        <!-- If desired, a GUI version is available allowing to move the simulated robot around manually
            This corresponds to moving around the real robot without the use of MoveIt. -->
        <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
        <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
        </node>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

        <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
        <include file="$(find panda_moveit_config)/launch/move_group.launch" pass_all_args="true">
            <arg name="allow_trajectory_execution" value="true"/>
            <arg name="fake_execution" value="true"/>
            <arg name="execution_type" value="$(arg execution_type)"/>
            <arg name="info" value="true"/>
            <arg name="pipeline" value="$(arg pipeline)"/>
            <arg name="load_gripper" value="$(arg load_gripper)"/>
            <arg name="load_robot_description" value="$(arg load_robot_description)"/>
        </include>
    </group>

    <group unless="$(arg use_sim)">
        <include file="$(find panda_moveit_config)/launch/panda_moveit.launch">
            <arg name="load_gripper" value="$(arg load_gripper)"/>
        </include>
    </group>

    <!-- Run Rviz and load the default config to see the state of the move_group node -->
    <include file="$(find panda_moveit_config)/launch/moveit_rviz.launch">
        <arg name="rviz_config" value="$(find pancake_pkg)/config/model.rviz"/>
    </include>

    <!-- yaml files go here -->
    <rosparam command="load" file="$(find pancake_pkg)/config/waypoints.yaml"/>
    <!-- <rosparam command="load" file="$(find pancake_pkg)/config/scene_params.yaml"/> -->
    <!-- <rosparam command="load" file="$(find pancake_pkg)/config/camera.yaml"/> -->
    <!-- <rosparam command="load" file="$(find pancake_pkg)/config/pancake_tags.yaml"/> -->
    <!-- <rosparam command="load" file="$(find pancake_pkg)/config/pancake_tag_settings.yaml"/> -->
    
    <!-- team-written nodes to launch go here -->
    <node name="pancake_control" pkg="pancake_pkg" type="pancake_control" output="screen"/>

    <include file="$(find pancake_pkg)/launch/vision_test.launch"/>
    
</launch>